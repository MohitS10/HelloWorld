{
  "name": "HouseKeeper",
  "type": "Java Application",
  "desc": "Java-App made to handle the boring parts of college.",
  "icon": "/static/images/DevBible.jpg",
  "images": [
	  "https://www.github.com/o-d-i-n/HouseKeeper/raw/master/Screenshots/login.png",
	  "https://www.github.com/o-d-i-n/HouseKeeper/raw/master/Screenshots/misc.png",
	  "https://www.github.com/o-d-i-n/HouseKeeper/raw/master/Screenshots/main.png",
	  "https://www.github.com/o-d-i-n/HouseKeeper/raw/master/Screenshots/chatting.png"
  ],
  "technologies": [
    "java"
  ],
	"long_desc": "# HouseKeeper\nA java application made to handle the boring parts of college.\n* Your attendance.\n* Current Aggregate Score.\n* Time Tables.\n* and So much more....\n\n# Build Instructions\n* Install IntelliJ IDE\n* Click on the HouseKeeper.IML file in your HouseKeeper IDE.This should load your entire project\n* To get MYSQL functioning, change the CLASSPATH to the location of the JDBC driver on your system\n* Run the Sql dump file on any functioning MySql admin panel to get your DB schema . (I use phpmyadmin)\n* Run the project\n\n### Current Features\n* [x] **A multithreaded server-client system**\n* [x] **A packet system that allows for parsing of different types Of files(Timetables, Text, StudentInfo etc.)**  \n* [x] **A Database Management System**\n- Student Info\n- Time Tables\n- Attendance\n- Percentage\n* [x] **A Private Chat System**\n- Connected clients can private message each other.\n- Check what users are connected\n* [ ] **GUI**\n- Making in JavaFX\n\n# Overview\n\nThe codebase is roughly divided into two parts.\n- The Server\n- The Client\n\n## Server\nThe server is an entity that allows multiple clients to connect to it and exchange meaningful information.\nAll database operations occur through the server.\nThe server performs the following functions:\n- Authentication of Client\n- Reading/Writing into The Database with regard to client's information\n- Provides a platform for communication between different clients\n\n\nThe server is multithreaded in nature ,which means that multiple clients can connect to it and each client is given its separate \"instance\" of the server.\nIn layman's terms it means that a prospective client does not have to wait for the preceding client to finish its work. Both the client's preform their operations in a parallel fashion.\n\nHere is a comprehensive list of the functions in the Server directory and their use:\n### Server Class\n### Variables\n1. **Port**:\nThe port on which server is instantiated.\n2. **Clients**:\nA list of Connected Client Socket connections.\n3. **connectedUsers**:\nA subset of the connected clients ,containing just the roll numbers of the clients.\n4. **server**:\nA Java Server Socket variable which is the main server variable.\n5. **clientSocket**:\nThe socket of the client that connects.\n6. **runningThread**:\nThe thread that runs listens for incoming connections.\n7. **threadPool**:\nThis consists of an array of threads that are ready and primed for incoming connections. Whenever a client clients, a worker thread from this thread pool array is given to the socket connection for it's further communication. Right now the default value is 10 threads. Could be extended to the 1000's. A benefit of a thread pool is that whenever a thread is finished with its work it returns to this array. This ensures that more threads than the prescribed limit are not used which could potentially crash the P.C.\n\n#### 1. Server Constructor\nInstantiates the server object. Starts the serverSocket on prescribed *port* and instantiates the JDBC connection to **mySQL**.\n\nGives this socket connection to the main listening thread called \"Server\" and Starts the thread.\n\n#### 2. run()\nThis function is automatically run when a thread is started. So whenever server Socket is started , this function runs.\nIt runs an infinite while loop which continue-sly listens in for client connection requests in the form as the **waitForConnection()** function.\n\n#### 3. waitForConnection()\n\nThis function listens for incoming conn. on getting a new connection it accepts it, and instantiates the clientConnect object. Which handles all further client communication.\nThis clientConnect object which contains the clientSocket is given to a worker thread plucked from the thread pool.\n\n#### 4. findClientConnection(Roll Number)\n\nA helper function used to find out the clientConnect object of a specific roll number.\nUseful for private Messaging.\n\n#### 5. addtoConnectedClientList(ClientConnect object)\n\nAdds client to the connectedUsers List. Again, useful for messaging and broadcast facility.\n\n\n### ClientConnect Class\n#### Purpose\nThe purpose of this class is to handle a one to one server/client connection.\n\n#### Variables\n1. clientSocket *(Socket)*\n2. serverText *(String)*\n3. input *(ObjectInput Stream)* - handles input stream, from client to server.\n4. output *(ObjectOutput Stream)* - handles output stream, from server to client.\n5. StudentInfo - a class object which stores student information like class, roll number, year etc.\n6. server *(Server Object)*\nThe server object which spawned this current calss object into its seperate thread.\n7. roll_number *(roll_number)*\n8. running -*(boolean)*- checks if server is running or client is still connected.\n9. insert,select,update (*MySQL operation helper classes*)\n10. auth_code *(String)*- This is interesting as to maintain security, an Authentication mechanism which prevents any information sharing from the server side if the client does not have this auth code in its request header. This code is generated on logging in. It is a random 32-byte alphanumeric string.\n\n### FUNCTIONS\n\n#### Constructor\na.k.a the run() method which runs on spawning the thread with this client connect class object as one of its parameters.\nIt sets up the input and output Streams through the **setupStreams()** function. Instantiates the insert , select, update helper objects which directly interact with the database.\n\nAnd then an infinite loop\nis run on the condition that *running* is true.\nThere is just one function in this loop. The ** connection() ** .\n\nAll of this is encapsulated in a try and a catch block for any SQL/IO Exceptions.\n\n#### setupStreams()\nSetups the I/O streams. For awesome communication brah !\n#### connection()\n\nThe bread and butter of this entire server setup :D.\nIt's aim is to listen for incoming requests from the client, checks if these requests are authenticated, parse the requests according to the request type and respond accordingly.\n\nThe *auth()* function checks for validity of request and also reponds back. This code section needs to be cleaned up but the functionality is all there.\n\nIf auth fails. A message is sent to the client telling it so, through the *sendtoClient()* function.\n\nAlso to maintain good coding style All this is encased in a try and a catch block.\n\nIf any exception occurs a message is sent to client informing it of the client to maintain transparency.\n\n#### auth()\n\nThis function is basically a big if else mess. What it currently does is it identifies what **type** the request is of. Examples include\n* LOGIN\n* REGISTER\n* STUDENTINFO\n* TIMETABLE\n* CONNECTED_USERS\n* CHAT REQUEST\n* SUBJECTS\n* ATTENDANCE\n\nApart from the login and register requests, the auth code is verified.\n\nEach request is of a Packet class type as the base class. Further classes are made by extending this Packet class.\nA more detailed look at the Packet class of Objects will undertaken soon.\n\nDepending on the type of the request the packet is cast to the actual class type. For example the input stream is parsed and the object is type casted to Packet. Now on further checking the type of Packet, for example ,if it is a STUDENT_LOGIN request this packet is further type casted into StudentLogin class which extends Packet.\n\n\nA brief overview of all request types:\n* Register: Check if user with a same roll number does  not already exist. If not then makes a new record into the user table putting roll number and password and returns a message to the client depending in the outcome.\n\n* Login: Performs the table check if password and roll number match as in the database. It return an alphanumeric 32 bit string auth code to the client and also stores it in the class variable *auth_code*.\n\n* StudentInfo: The student sends in information like section ,year, branch, age etc. , to the server in the form of a *StudentInfo* object.\nThe logic checks if auth code matches, if yes then it updates the user details in the MYSQL database.\n\n* Connected Users:\nSends in the roll number of the  currently connected clients to the server.\n\n* Chat: Receives a message and a destination roll number. Checks if that roll number is connected , if yes then it sends the message object to the destination user through accessing **its** clientConnect object's *sendToClient()* function\n\n* Subjects: Sends a list of sentences to the client after parsing the timetable\n* Attendance: Gets a list of numbers in the form of how many classes the student has attended *that* day eg(1 - for one class,2 - for two classes and so on)\nOn receiving these numbers it updates the database table attendance accordingly.\n\n#### sendToClient()\n\nThis function takes as parameters a Packet class object, which is then deserialized into bytes and sent through the output stream of the server to the client.\n\n#### stop()\n\nThis function closes the connection between client and server from the server side. After closing the *clientSocket* and calls the *removeFromClient()* function.\n\n#### removeFromClient()\nThis function removes the closing client from the clients array in the server class. So as to remove the client from the currently connected users list.\n\n\n## Conclusion\n\nWith this we come to an end on the overview of The server setup of this application.\n\nThe client side architecture and the packet class system will be explained in the coming days.\n\n## to be continued . . .\n\n\n\n#### Contributors\n<!-- Contributors START\nKaran_Chahal karanchahal https://github.com/karanchahal code doc\nMayank_Badola mbad0la https://github.com/mbad0la doc\nContributors END -->\n<!-- Contributors table START -->\n| [![Karan Chahal](https://avatars.githubusercontent.com/karanchahal?s=100)<br /><sub>Karan Chahal</sub>](https://github.com/karanchahal)<br />[💻](https://github.com/o-d-i-n/HouseKeeper/commits?author=karanchahal) [📖](https://github.com/o-d-i-n/HouseKeeper/commits?author=karanchahal) | [![Mayank Badola](https://avatars.githubusercontent.com/mbad0la?s=100)<br /><sub>Mayank Badola</sub>](https://github.com/mbad0la)<br />[📖](https://github.com/o-d-i-n/HouseKeeper/commits?author=mbad0la) |\n| :---: | :---: |\n<!-- Contributors table END -->\n",
  "contributors": [],
  "meta": {
		"updated": "",
		"size": "",
		"version": "",
		"platform": ""
	}
}
